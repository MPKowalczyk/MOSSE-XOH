///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 3.5
//  \   \         Application : 7 Series FPGAs Transceivers  Wizard
//  /   /         Filename : gtwizard_0_gt_usrclk_source.v
// /___/   /\      
// \   \  /  \ 
//  \___\/\___\ 
//
//
// Module gtwizard_0_GT_USRCLK_SOURCE (for use with GTs)
// Generated by Xilinx 7 Series FPGAs Transceivers Wizard
// 
// 
// (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


`timescale 1ns / 1ps

//***********************************Entity Declaration*******************************

module exdes_vid_phy_controller_0_gt_usrclk_source_8series #
(
 
	// HDMI
  parameter C_TX_REFCLK      = 0,
  parameter C_RX_REFCLK      = 1,
  parameter C_DRU_REFCLK     = 1,
  parameter C_Tx_Protocol    = 1,
  parameter C_Rx_Protocol    = 1,
  parameter C_NIDRU          = 1,
  parameter TX_USE_MMCM      = 0,
  parameter RX_USE_MMCM      = 0,
  parameter TX_MMCM_CLKIN_SRC= 0,  //0: OUTCLK or 1:REFCLK 
  parameter RX_MMCM_CLKIN_SRC= 0,  //0: OUTCLK or 1:REFCLK 
  parameter C_INPUT_PIXELS_PER_CLOCK= 4,  //
  parameter ADV_CLOCK_MODE   = 0,
  parameter GTH_TYPE         = 3

) 
(
 
	// HDMI
    input  wire        MMCM_TX_DRP_RST,
    input  wire        MMCM_TX_DRP_SCLK,
    input  wire        MMCM_TX_DRP_TXN_AVAILABLE,
    input  wire        MMCM_TX_DRP_RSP_READ,
    input  wire [11:0] MMCM_TX_DRPADDR, 
    input  wire        MMCM_TX_DRPEN,
    input  wire        MMCM_TX_DRPWE,
    input  wire [15:0] MMCM_TX_DRPDI,
    output wire        MMCM_TX_DRPBUSY,
    output wire        MMCM_TX_DRPRDY,
    output wire [15:0] MMCM_TX_DRPDO,

    input  wire        MMCM_RX_DRP_RST,
    input  wire        MMCM_RX_DRP_SCLK,
    input  wire        MMCM_RX_DRP_TXN_AVAILABLE,
    input  wire        MMCM_RX_DRP_RSP_READ,
    input  wire [11:0] MMCM_RX_DRPADDR, 
    input  wire        MMCM_RX_DRPEN,
    input  wire        MMCM_RX_DRPWE,
    input  wire [15:0] MMCM_RX_DRPDI,
    output wire        MMCM_RX_DRPBUSY,
    output wire        MMCM_RX_DRPRDY,
    output wire [15:0] MMCM_RX_DRPDO,
	
    input  wire        OBUFTDS_TX_EN,	
	input  wire        OBUFTDS_RX_EN,
    input  wire		   mgtrefclk0_odiv2_in,  
    input  wire		   mgtrefclk1_odiv2_in,  
    input  wire		   gtnorthrefclk0_odiv2_in,  
    input  wire		   gtnorthrefclk1_odiv2_in,  
    input  wire		   gtsouthrefclk0_odiv2_in,  
    input  wire		   gtsouthrefclk1_odiv2_in,  
    input  wire		   GT0_TX_MMCM_PWRDN_IN,  
    input  wire		   GT0_RX_MMCM_PWRDN_IN, 		     

    input  wire		  mgtrefclk0_in,  
    input  wire		  mgtrefclk1_in,  
    input  wire		  Q0_CLK0_GTREFCLK_PAD_N_IN,
    input  wire		  Q0_CLK0_GTREFCLK_PAD_P_IN,
 
    input  wire		  Q0_CLK0_GTREFCLK_IBUF_EN_IN,
    output wire		  Q0_CLK0_GTREFCLK_OUT,
    input  wire		  Q0_CLK1_GTREFCLK_PAD_N_IN,
    input  wire		  Q0_CLK1_GTREFCLK_PAD_P_IN,
 
    input  wire		  Q0_CLK1_GTREFCLK_IBUF_EN_IN,
    output wire		  Q0_CLK1_GTREFCLK_OUT,

    input  wire       BUFGT_TXUSRCLK_CLEAR,
    input  wire [2:0] BUFGT_TXUSRCLK_DIV,
    input  wire       BUFGT_RXUSRCLK_CLEAR,
    input  wire [2:0] BUFGT_RXUSRCLK_DIV,
    output wire       TXUSRCLK_ACTIVE_OUT,
    output wire       RXUSRCLK_ACTIVE_OUT,

    output wire		  GT0_TXCLK_LOCK_OUT,
    input  wire		  GT0_TX_MMCM_RESET_IN,    
	
 
	// HDMI
    output wire		  GT0_RXCLK_LOCK_OUT,
    input  wire		  GT0_RX_MMCM_RESET_IN,    
			          
    output wire		  GT0_TX_MMCM_CLKOUT1_OUT,
    output wire		  GT0_TX_MMCM_CLKOUT2_OUT,
    output wire		  GT0_RX_MMCM_CLKOUT1_OUT,
    output wire		  GT0_RX_MMCM_CLKOUT2_OUT,
	
    output wire		  Q0_CLK0_GTREFCLK_ODIV2_OUT,
    output wire		  Q0_CLK1_GTREFCLK_ODIV2_OUT,
    output wire		  GT0_TX_MMCM_CLKOUT1_P_OUT,
    output wire		  GT0_TX_MMCM_CLKOUT1_N_OUT,
    output wire		  GT0_RX_MMCM_CLKOUT1_P_OUT,
    output wire		  GT0_RX_MMCM_CLKOUT1_N_OUT,		
	
 

    output wire		  GT0_TXUSRCLK_OUT,
    output wire		  GT0_TXUSRCLK2_OUT,
    input  wire		  GT0_TXOUTCLK_IN,
    output wire		  GT0_RXUSRCLK_OUT,
    output wire		  GT0_RXUSRCLK2_OUT,
    input  wire		  GT0_RXOUTCLK_IN

);


	`define DLY #1
	localparam GTREFCLK0 = 0;
	localparam GTREFCLK1 = 1;
	localparam GTNORTHREFCLK0 = 2;
	localparam GTNORTHREFCLK1 = 3;
	localparam GTSOUTHREFCLK0 = 4;
	localparam GTSOUTHREFCLK1 = 5;

//*********************************Wire Declarations**********************************
    wire            tied_to_ground_i;
    wire            tied_to_vcc_i;
 
    wire            gt0_txoutclk_i; 
    wire            gt0_rxoutclk_i;
    wire            q0_clk1_gtrefclk; 
    wire            q0_clk0_gtrefclk;

    wire            gt0_txusrclk_i;
    wire            gt0_txoutclk_i_bufgt;
    wire            gt0_rxusrclk_i;
    wire            txoutclk_mmcm0_locked_i;
    wire            txoutclk_mmcm0_reset_i;
 	
	// HDMI
    wire            rxoutclk_mmcm0_locked_i;
    wire            rxoutclk_mmcm0_reset_i;
    wire            q0_clk1_gtrefclk_div1; 
    wire            q0_clk0_gtrefclk_div1;
    wire            q0_clk1_gtrefclk_div1_i; 
    wire            q0_clk0_gtrefclk_div1_i;
 
//*********************************** Beginning of Code *******************************

    //  Static signal Assigments    
    assign tied_to_ground_i             = 1'b0;
    assign tied_to_vcc_i                = 1'b1;
    assign gt0_txoutclk_i = GT0_TXOUTCLK_IN;
    assign gt0_rxoutclk_i = GT0_RXOUTCLK_IN;
     
    assign Q0_CLK0_GTREFCLK_OUT = (ADV_CLOCK_MODE)?mgtrefclk0_in:q0_clk0_gtrefclk;
    assign Q0_CLK1_GTREFCLK_OUT = (ADV_CLOCK_MODE)?mgtrefclk1_in:q0_clk1_gtrefclk;
 
    assign Q0_CLK0_GTREFCLK_ODIV2_OUT = (ADV_CLOCK_MODE)?mgtrefclk0_odiv2_in:q0_clk0_gtrefclk_div1;
    assign Q0_CLK1_GTREFCLK_ODIV2_OUT = (ADV_CLOCK_MODE)?mgtrefclk1_odiv2_in:q0_clk1_gtrefclk_div1;	
 	
	
    generate
      if (ADV_CLOCK_MODE==0 && GTH_TYPE==3) begin : gen_standard_clocking

 
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK0) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK0 || (C_DRU_REFCLK == GTREFCLK0 && C_NIDRU == 1)))) begin
 
			// Differential reference clock buffer for MGTREFCLK0
			IBUFDS_GTE3 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE3_MGTREFCLK0_INST (
			  .I     (Q0_CLK0_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK0_GTREFCLK_PAD_N_IN),
 
				// HDMI
			  .CEB   (Q0_CLK0_GTREFCLK_IBUF_EN_IN),
			  .O     (q0_clk0_gtrefclk),
			  .ODIV2 (q0_clk0_gtrefclk_div1_i)
 
			);
 
		end else begin
			assign q0_clk0_gtrefclk = 1'b0;
		end
 
        
 
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK1) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK1 || (C_DRU_REFCLK == GTREFCLK1 && C_NIDRU == 1)))) begin
 
			// Differential reference clock buffer for MGTREFCLK1
			IBUFDS_GTE3 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE3_MGTREFCLK1_INST (
			  .I     (Q0_CLK1_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK1_GTREFCLK_PAD_N_IN),
 
				// HDMI
			  .CEB   (Q0_CLK1_GTREFCLK_IBUF_EN_IN),
			  .O     (q0_clk1_gtrefclk),
			  .ODIV2 (q0_clk1_gtrefclk_div1_i)
 
			);
 
		end else begin
			assign q0_clk1_gtrefclk = 1'b0;
		end
 
			
      end else if (ADV_CLOCK_MODE==0 && GTH_TYPE==4) begin

 
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK0) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK0 || (C_DRU_REFCLK == GTREFCLK0 && C_NIDRU == 1)))) begin
 
			// Differential reference clock buffer for MGTREFCLK0
			IBUFDS_GTE4 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE4_MGTREFCLK0_INST (
			  .I     (Q0_CLK0_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK0_GTREFCLK_PAD_N_IN),
 
				// HDMI
			  .CEB   (Q0_CLK0_GTREFCLK_IBUF_EN_IN),
			  .O     (q0_clk0_gtrefclk),
			  .ODIV2 (q0_clk0_gtrefclk_div1_i)
 
			);
 
		end else begin
			assign q0_clk0_gtrefclk = 1'b0;
		end
 
        
 
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK1) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK1 || (C_DRU_REFCLK == GTREFCLK1 && C_NIDRU == 1)))) begin
 
			// Differential reference clock buffer for MGTREFCLK1
			IBUFDS_GTE4 #(
			  .REFCLK_EN_TX_PATH  (1'b0),
			  .REFCLK_HROW_CK_SEL (2'b00),
			  .REFCLK_ICNTL_RX    (2'b00)
			) IBUFDS_GTE4_MGTREFCLK1_INST (
			  .I     (Q0_CLK1_GTREFCLK_PAD_P_IN),
			  .IB    (Q0_CLK1_GTREFCLK_PAD_N_IN),
 
				// HDMI
			  .CEB   (Q0_CLK1_GTREFCLK_IBUF_EN_IN),
			  .O     (q0_clk1_gtrefclk),
			  .ODIV2 (q0_clk1_gtrefclk_div1_i)
 
			);
 
		end else begin
			assign q0_clk1_gtrefclk = 1'b0;
		end
 

      end else begin
        assign q0_clk0_gtrefclk = 1'b0;
        assign q0_clk1_gtrefclk = 1'b0;
      end // if
    endgenerate

 	

 
 
    generate
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK0) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK0 || (C_DRU_REFCLK == GTREFCLK0 && C_NIDRU == 1)))) begin

             // Drive GTREFCLK0_ODIV2 with BUFG_GT-buffered source clock
             // frequency ratio
             wire CESYNC_gtrefclk0_odiv2;
             wire CLRSYNC_gtrefclk0_odiv2;
             BUFG_GT_SYNC bufg_gt_sync_gtrefclk0_odiv2_inst (
            	.CESYNC(CESYNC_gtrefclk0_odiv2),   // 1-bit output: Synchronized CE
            	.CLRSYNC(CLRSYNC_gtrefclk0_odiv2), // 1-bit output: Synchronized CLR
            	.CE(1'b1),           // 1-bit input: Asynchronous enable
            	.CLK(q0_clk0_gtrefclk_div1_i),         // 1-bit input: Clock
            	.CLR(1'b0)          // 1-bit input: Asynchronous clear
             );
            
              BUFG_GT bufg_gt_gtrefclk0_odiv2_inst (
            	.CE      (CESYNC_gtrefclk0_odiv2),
            	.CEMASK  (1'b0),
            	.CLR     (CLRSYNC_gtrefclk0_odiv2),
            	.CLRMASK (1'b0),
            	.DIV     (3'b0),
            	.I       (q0_clk0_gtrefclk_div1_i),
            	.O       (q0_clk0_gtrefclk_div1)
              );
        end else begin
             assign q0_clk0_gtrefclk_div1 = 1'b0;
        end 
	
		if ((C_Tx_Protocol==1 && C_TX_REFCLK==GTREFCLK1) || (C_Rx_Protocol==1 && (C_RX_REFCLK==GTREFCLK1 || (C_DRU_REFCLK == GTREFCLK1 && C_NIDRU == 1)))) begin
              // Drive GTREFCLK1_ODIV2 with BUFG_GT-buffered source clock
              // frequency ratio
             wire CESYNC_gtrefclk1_odiv2;
             wire CLRSYNC_gtrefclk1_odiv2;
             BUFG_GT_SYNC bufg_gt_sync_gtrefclk1_odiv2_inst (
            	.CESYNC(CESYNC_gtrefclk1_odiv2),   // 1-bit output: Synchronized CE
            	.CLRSYNC(CLRSYNC_gtrefclk1_odiv2), // 1-bit output: Synchronized CLR
            	.CE(1'b1),           // 1-bit input: Asynchronous enable
            	.CLK(q0_clk1_gtrefclk_div1_i),         // 1-bit input: Clock
            	.CLR(1'b0)          // 1-bit input: Asynchronous clear
             );
            
              BUFG_GT bufg_gt_gtrefclk1_odiv2_inst (
            	.CE      (CESYNC_gtrefclk1_odiv2),
            	.CEMASK  (1'b0),
            	.CLR     (CLRSYNC_gtrefclk1_odiv2),
            	.CLRMASK (1'b0),
            	.DIV     (3'b0),
            	.I       (q0_clk1_gtrefclk_div1_i),
            	.O       (q0_clk1_gtrefclk_div1)
              );
        end else begin
             assign q0_clk1_gtrefclk_div1 = 1'b0;
        end 
 	
    endgenerate
  

 
	// HDMI
    // Instantiate a MMCM module to divide the reference clock. Uses internal feedback
    // for improved jitter performance, and to avoid consuming an additional BUFG
    generate
        if (TX_USE_MMCM==1 && C_Tx_Protocol==1) begin : tx_mmcm

      // Drive TXUSRCLK with BUFG_GT-buffered source clock, dividing the input by the integral source clock to TXUSRCLK
      // frequency ratio
      BUFG_GT bufg_gt_tx_usrclk_inst (
    	.CE      (1'b1),
    	.CEMASK  (1'b0),
    	.CLR     (BUFGT_TXUSRCLK_CLEAR),
    	.CLRMASK (1'b0),
    	.DIV     (BUFGT_TXUSRCLK_DIV),
    	.I       (gt0_txoutclk_i),
    	.O       (gt0_txusrclk_i)
      );

     	  wire[15:0] TX_DO;
          wire       TX_DRDY;
          wire       TX_LOCKED;
          wire       TX_DWE;
          wire       TX_DEN;
          wire[6:0]  TX_DADDR;
          wire[15:0] TX_DI;
          wire       gt0_txmmcm_clkin_i;
          wire       gt0_txmmcm_clkout1_oddr_data_i;
		  
          assign TX_LOCKED = txoutclk_mmcm0_locked_i;
 

           // TXPLL DRP CONTROLLER
           wire [31:0] DRP_Config_mmcm_txusrclk;
           wire [31:0] DRP_Status_mmcm_txusrclk;
 
           assign DRP_Config_mmcm_txusrclk[11:0] = MMCM_TX_DRPADDR;
           assign DRP_Config_mmcm_txusrclk[12]   = MMCM_TX_DRPEN;
           assign DRP_Config_mmcm_txusrclk[13]   = MMCM_TX_DRPWE;
           assign DRP_Config_mmcm_txusrclk[31:16]= MMCM_TX_DRPDI;
           assign MMCM_TX_DRPBUSY = DRP_Status_mmcm_txusrclk[17];
           assign MMCM_TX_DRPRDY  = DRP_Status_mmcm_txusrclk[16];
           assign MMCM_TX_DRPDO   = DRP_Status_mmcm_txusrclk[15:0];
		
       
           vid_phy_controller_v2_2_1_drp_control_hdmi #  
          (
               .DRP_ADDR_WIDTH (7)
           )
           TXPLL_DRP_INST
           (
 
               .Config_Clk          (MMCM_TX_DRP_SCLK),
               .Config_Rst          (MMCM_TX_DRP_RST),
               .DRP_Config          (DRP_Config_mmcm_txusrclk),
               .DRP_Status          (DRP_Status_mmcm_txusrclk),
               .drp_txn_available   (MMCM_TX_DRP_TXN_AVAILABLE),
               .drp_rsp_read        (MMCM_TX_DRP_RSP_READ),
               .DRPCLK              (MMCM_TX_DRP_SCLK),
               .DRPBUSY             (1'b0),
               .DRPEN               (TX_DEN),
               .DRPWE               (TX_DWE),
               .DRPADDR             (TX_DADDR),
               .DRPDI               (TX_DI),
               .DRPDO               (TX_DO),
               .DRPRDY              (TX_DRDY)  
		
          );

 
		// HDMI
           assign  txoutclk_mmcm0_reset_i =  GT0_TX_MMCM_RESET_IN;

           if      (C_TX_REFCLK == GTREFCLK0)      assign gt0_txmmcm_clkin_i = q0_clk0_gtrefclk_div1;
           else if (C_TX_REFCLK == GTREFCLK1)      assign gt0_txmmcm_clkin_i = q0_clk1_gtrefclk_div1;
           else if (C_TX_REFCLK == GTNORTHREFCLK0) assign gt0_txmmcm_clkin_i = gtnorthrefclk0_odiv2_in;
           else if (C_TX_REFCLK == GTNORTHREFCLK1) assign gt0_txmmcm_clkin_i = gtnorthrefclk1_odiv2_in; 
           else if (C_TX_REFCLK == GTSOUTHREFCLK0) assign gt0_txmmcm_clkin_i = gtsouthrefclk0_odiv2_in;
           else if (C_TX_REFCLK == GTSOUTHREFCLK1) assign gt0_txmmcm_clkin_i = gtsouthrefclk1_odiv2_in;
           exdes_vid_phy_controller_0_CLOCK_MODULE_8series #
           (
               .MULT                           (4),
               .DIVIDE                         (1),
               .CLK_PERIOD                     (3.367),
               .OUT0_DIVIDE                    (8),
               .OUT1_DIVIDE                    (4),
 
               .OUT2_DIVIDE                    (8),
               .OUT3_DIVIDE                    (12),
               .INST_DIRECTION                 (0)
           )
	
           txoutclk_mmcm0_i
           (
			// HDMI
               .CLK0_OUT                       (),
               .CLK1_OUT                       (GT0_TX_MMCM_CLKOUT1_OUT),
               .CLK2_OUT                       (GT0_TX_MMCM_CLKOUT2_OUT),
               .CLK3_OUT                       (),
               .CLK_IN                         ((TX_MMCM_CLKIN_SRC==0)?gt0_txoutclk_i:gt0_txmmcm_clkin_i),
               .DCLK                           (MMCM_TX_DRP_SCLK),
               .DWE                            (TX_DWE),
               .DEN                            (TX_DEN),
               .DADDR                          (TX_DADDR),
               .DI                             (TX_DI),
               .DRDY                           (TX_DRDY),
               .DO                             (TX_DO),
               .MMCM_PWRDN_IN                  (GT0_TX_MMCM_PWRDN_IN),
               .MMCM_LOCKED_OUT                (txoutclk_mmcm0_locked_i),
               .MMCM_RESET_IN                  (txoutclk_mmcm0_reset_i)
           );

 	
	   
           // TX CLKOUT1 clock driver
           //CR982530 - Directly infer OSERDES instead of ODDR due to DRC error when Vivado 
           //handles the ODDR to OSERDES mapping
		   wire obuftds_tx_en_t_out;
           OSERDESE3 #(
               .ODDR_MODE           ("TRUE"),
               .OSERDES_T_BYPASS    ("TRUE"),
               .DATA_WIDTH          (8),                 
               .INIT                (1'b0),                    
               .IS_CLKDIV_INVERTED  (1'b0),      
               .IS_CLK_INVERTED     (1'b0),         
               .IS_RST_INVERTED     (1'b0),
               .SIM_DEVICE          ("ULTRASCALE_PLUS")
           )
           GT0_TX_MMCM_CLKOUT1_ODDR_INST (
               .OQ                  (gt0_txmmcm_clkout1_oddr_data_i),         
               .T_OUT               (obuftds_tx_en_t_out),   
               .CLK                 (GT0_TX_MMCM_CLKOUT1_OUT),       
               .CLKDIV              (GT0_TX_MMCM_CLKOUT1_OUT),
               .D                   ({4'h0,2'h3,~OBUFTDS_TX_EN,1'b1}),           
               .RST                 (1'b0),       
               .T                   (~OBUFTDS_TX_EN)            
           );

           // TX CLKOUT1 clock buffer
           OBUFTDS
           #(
           	.IOSTANDARD		("DEFAULT"),
           	.SLEW			("FAST")    
           )
           GT0_TX_MMCM_CLKOUT1_OBUFTDS_INST
           (
               .I			(gt0_txmmcm_clkout1_oddr_data_i),
               .T			(obuftds_tx_en_t_out), // 3-state enable input (high disables output buffer)
               .O			(GT0_TX_MMCM_CLKOUT1_P_OUT),
               .OB			(GT0_TX_MMCM_CLKOUT1_N_OUT) 
           );		   
		   
    end else begin
	
	    assign GT0_TX_MMCM_CLKOUT1_OUT   = 1'b0;
	    assign GT0_TX_MMCM_CLKOUT2_OUT   = 1'b0;
	    assign gt0_txusrclk_i            = 1'b0;
	    assign txoutclk_mmcm0_locked_i   = 1'b0;
	    assign GT0_TX_MMCM_CLKOUT1_P_OUT = 1'b0;
	    assign GT0_TX_MMCM_CLKOUT1_N_OUT = 1'b0;
		
	end
    endgenerate

	// HDMI
    // Instantiate a MMCM module to divide the reference clock. Uses internal feedback
    // for improved jitter performance, and to avoid consuming an additional BUFG
    generate
        if (RX_USE_MMCM==1 && C_Rx_Protocol==1) begin : rx_mmcm

         // Drive RXUSRCLK with BUFG_GT-buffered source clock, dividing the input by the integral source clock to RXUSRCLK
         // frequency ratio
         BUFG_GT bufg_gt_rx_usrclk_inst (
           .CE      (1'b1),
           .CEMASK  (1'b0),
           .CLR     (BUFGT_RXUSRCLK_CLEAR),
           .CLRMASK (1'b0),
           .DIV     (BUFGT_RXUSRCLK_DIV),
           .I       (gt0_rxoutclk_i),
           .O       (gt0_rxusrclk_i)
         );

          wire[15:0] RX_DO;
          wire       RX_DRDY;
          wire       RX_LOCKED;
          wire       RX_DWE;
          wire       RX_DEN;
          wire[6:0]  RX_DADDR;
          wire[15:0] RX_DI;
          wire       gt0_rxmmcm_clkin_i;
          wire       gt0_rxmmcm_clkout1_oddr_data_i;
		  

           // RXPLL DRP CONTROLLER
           wire [31:0] DRP_Config_mmcm_rxusrclk;
           wire [31:0] DRP_Status_mmcm_rxusrclk;
           assign DRP_Config_mmcm_rxusrclk[11:0] = MMCM_RX_DRPADDR;
           assign DRP_Config_mmcm_rxusrclk[12]   = MMCM_RX_DRPEN;
           assign DRP_Config_mmcm_rxusrclk[13]   = MMCM_RX_DRPWE;
           assign DRP_Config_mmcm_rxusrclk[31:16]= MMCM_RX_DRPDI;
           assign MMCM_RX_DRPBUSY = DRP_Status_mmcm_rxusrclk[17];
           assign MMCM_RX_DRPRDY  = DRP_Status_mmcm_rxusrclk[16];
           assign MMCM_RX_DRPDO   = DRP_Status_mmcm_rxusrclk[15:0];
           
           vid_phy_controller_v2_2_1_drp_control_hdmi #  
           (
               .DRP_ADDR_WIDTH (7)
           )
           RXPLL_DRP_INST
           (
               .Config_Clk          (MMCM_RX_DRP_SCLK),
               .Config_Rst          (MMCM_RX_DRP_RST),
               .DRP_Config          (DRP_Config_mmcm_rxusrclk),
               .DRP_Status          (DRP_Status_mmcm_rxusrclk),
               .drp_txn_available   (MMCM_RX_DRP_TXN_AVAILABLE),
               .drp_rsp_read        (MMCM_RX_DRP_RSP_READ),
               .DRPCLK              (MMCM_RX_DRP_SCLK),
               .DRPBUSY             (1'b0),
               .DRPEN               (RX_DEN),
               .DRPWE               (RX_DWE),
               .DRPADDR             (RX_DADDR),
               .DRPDI               (RX_DI),
               .DRPDO               (RX_DO),
               .DRPRDY              (RX_DRDY)  
          );

           assign RX_LOCKED = rxoutclk_mmcm0_locked_i;

           assign  rxoutclk_mmcm0_reset_i =  GT0_RX_MMCM_RESET_IN;
		   
           if      (C_RX_REFCLK == GTREFCLK0)      assign gt0_rxmmcm_clkin_i = q0_clk0_gtrefclk_div1;
           else if (C_RX_REFCLK == GTREFCLK1)      assign gt0_rxmmcm_clkin_i = q0_clk1_gtrefclk_div1;
           else if (C_RX_REFCLK == GTNORTHREFCLK0) assign gt0_rxmmcm_clkin_i = gtnorthrefclk0_odiv2_in;
           else if (C_RX_REFCLK == GTNORTHREFCLK1) assign gt0_rxmmcm_clkin_i = gtnorthrefclk1_odiv2_in; 
           else if (C_RX_REFCLK == GTSOUTHREFCLK0) assign gt0_rxmmcm_clkin_i = gtsouthrefclk0_odiv2_in;
           else if (C_RX_REFCLK == GTSOUTHREFCLK1) assign gt0_rxmmcm_clkin_i = gtsouthrefclk1_odiv2_in;
           exdes_vid_phy_controller_0_CLOCK_MODULE_8series #
           (
               .MULT                           (4),
               .DIVIDE                         (1),
               .CLK_PERIOD                     (3.367),
               .OUT0_DIVIDE                    (8),
               .OUT1_DIVIDE                    (4),
 
               .OUT2_DIVIDE                    (8),
	
               .OUT3_DIVIDE                    (12),
               .INST_DIRECTION                 (1)
           )
           rxoutclk_mmcm0_i
           (
               .CLK0_OUT                       (),
               .CLK1_OUT                       (GT0_RX_MMCM_CLKOUT1_OUT),
               .CLK2_OUT                       (GT0_RX_MMCM_CLKOUT2_OUT),
               .CLK3_OUT                       (),
               .CLK_IN                         ((RX_MMCM_CLKIN_SRC==0)?gt0_rxoutclk_i:gt0_rxmmcm_clkin_i),
               .DCLK                           (MMCM_RX_DRP_SCLK),
               .DWE                            (RX_DWE),
               .DEN                            (RX_DEN),
               .DADDR                          (RX_DADDR),
               .DI                             (RX_DI),
               .DRDY                           (RX_DRDY),
               .DO                             (RX_DO),
               .MMCM_LOCKED_OUT                (rxoutclk_mmcm0_locked_i),
               .MMCM_PWRDN_IN                  (GT0_RX_MMCM_PWRDN_IN),
               .MMCM_RESET_IN                  (rxoutclk_mmcm0_reset_i)
           );

           // RX CLKOUT1 clock driver
           //CR982530 - Directly infer OSERDES instead of ODDR due to DRC error when Vivado 
           //handles the ODDR to OSERDES mapping
           wire obuftds_rx_en_t_out;
           OSERDESE3 #(
               .ODDR_MODE           ("TRUE"),
               .OSERDES_T_BYPASS    ("TRUE"),
               .DATA_WIDTH          (8),                 
               .INIT                (1'b0),                    
               .IS_CLKDIV_INVERTED  (1'b0),      
               .IS_CLK_INVERTED     (1'b0),         
               .IS_RST_INVERTED     (1'b0),
               .SIM_DEVICE          ("ULTRASCALE_PLUS")
           )
           GT0_RX_MMCM_CLKOUT1_ODDR_INST (
               .OQ                  (gt0_rxmmcm_clkout1_oddr_data_i),         
               .T_OUT               (obuftds_rx_en_t_out),   
               .CLK                 (GT0_RX_MMCM_CLKOUT1_OUT), 
               .CLKDIV              (GT0_RX_MMCM_CLKOUT1_OUT),       
               .D                   ({4'h0,2'h3,~OBUFTDS_RX_EN,1'b1}),           
               .RST                 (1'b0),       
               .T                   (~OBUFTDS_RX_EN)            
           );

			// RX CLKOUT1 clock buffer
           OBUFTDS
           #(
           	.IOSTANDARD		("DEFAULT"),
           	.SLEW			("FAST")    
           )
           GT0_RX_MMCM_CLKOUT1_OBUFTDS_INST
           (
               .I			(gt0_rxmmcm_clkout1_oddr_data_i),
               .T			(obuftds_rx_en_t_out), // 3-state enable input (high disables output buffer)
               .O			(GT0_RX_MMCM_CLKOUT1_P_OUT),
               .OB			(GT0_RX_MMCM_CLKOUT1_N_OUT) 
           );		   
		   
    end else begin
	
	    assign GT0_RX_MMCM_CLKOUT1_OUT   = 1'b0;
	    assign GT0_RX_MMCM_CLKOUT2_OUT   = 1'b0;
	    assign gt0_rxusrclk_i            = 1'b0;
	    assign rxoutclk_mmcm0_locked_i   = 1'b0;
	    assign GT0_RX_MMCM_CLKOUT1_P_OUT = 1'b0;
	    assign GT0_RX_MMCM_CLKOUT1_N_OUT = 1'b0;
		
    end    
    endgenerate

// Clock active assignment
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_tx_active_meta = 1'b0;
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_tx_active_sync = 1'b0;
  always @(posedge GT0_TXUSRCLK2_OUT, posedge BUFGT_TXUSRCLK_CLEAR) begin
    if (BUFGT_TXUSRCLK_CLEAR) begin
      gtwiz_userclk_tx_active_meta <= 1'b0;
      gtwiz_userclk_tx_active_sync <= 1'b0;
    end
    else begin
      gtwiz_userclk_tx_active_meta <= 1'b1;
      gtwiz_userclk_tx_active_sync <= gtwiz_userclk_tx_active_meta;
    end
  end
  assign TXUSRCLK_ACTIVE_OUT = gtwiz_userclk_tx_active_sync;

  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_rx_active_meta = 1'b0;
  (* ASYNC_REG = "TRUE" *) reg gtwiz_userclk_rx_active_sync = 1'b0;
  always @(posedge GT0_RXUSRCLK2_OUT, posedge BUFGT_RXUSRCLK_CLEAR) begin
    if (BUFGT_RXUSRCLK_CLEAR) begin
      gtwiz_userclk_rx_active_meta <= 1'b0;
      gtwiz_userclk_rx_active_sync <= 1'b0;
    end
    else begin
      gtwiz_userclk_rx_active_meta <= 1'b1;
      gtwiz_userclk_rx_active_sync <= gtwiz_userclk_rx_active_meta;
    end
  end
  assign RXUSRCLK_ACTIVE_OUT = gtwiz_userclk_rx_active_sync;

// Output clock assignments 
assign GT0_TXUSRCLK_OUT   = gt0_txusrclk_i;
assign GT0_TXUSRCLK2_OUT  = gt0_txusrclk_i;
assign GT0_RXUSRCLK_OUT   = gt0_rxusrclk_i;
assign GT0_RXUSRCLK2_OUT  = gt0_rxusrclk_i;
assign GT0_TXCLK_LOCK_OUT = txoutclk_mmcm0_locked_i;
assign GT0_RXCLK_LOCK_OUT = rxoutclk_mmcm0_locked_i;


endmodule

